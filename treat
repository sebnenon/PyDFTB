#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys,os
import numpy as np
from dftb.geometry import isPtInCell

filein = sys.argv[1]
with open(sys.argv[1],'r') as arf:
	content=[x .strip() for x in arf.readlines()]
header= '\n'.join(content[:5])+'\n'
with open('final.car','w') as out:
	out.write(header)
for line in content:
	if "PBC " in line:
		break
pbc=line.split()[1:7]
print pbc
a = np.float64(pbc[0])
b = np.float64(pbc[1])
c = np.float64(pbc[2])
alpha = np.float64(pbc[3])
beta = np.float64(pbc[4])
gamma = np.float64(pbc[5])
alpha_r = alpha*np.pi/180.0
beta_r = beta*np.pi/180.0
gamma_r = gamma*np.pi/180.0

#print a,b,c,alpha,beta,gamma

Mx=np.zeros((3,3),dtype=np.float64)
Mx[0,0]+=a
Mx[1,0]+=b*np.cos(gamma_r)
Mx[1,1]+=b*np.sin(gamma_r)
Mx[2,0]+=c*np.cos(beta_r)
Mx[2,1]+=c*np.sin(gamma_r)*np.cos(alpha_r)
Mx[2,2]+=c*np.sin(alpha_r)

#print Mx
#print
A = np.linalg.norm(Mx[0,:])
B = np.linalg.norm(Mx[1,:])
C = np.linalg.norm(Mx[2,:])

Alpha = np.arccos(np.dot(Mx[1,:],Mx[2,:])/(B*C))/np.pi*180.
Beta = np.arccos(np.dot(Mx[0,:],Mx[2,:])/(A*C))/np.pi*180.
Gamma = np.arccos(np.dot(Mx[1,:],Mx[0,:])/(A*B))/np.pi*180.

#print A,B,C,Alpha,Beta,Gamma
#print a,b,c,alpha,beta,gamma


n=2.
m=1.
print('Generate ({:.0f},{:.0f}) structure'.format(n,m))
print('Compute theta')
gg=m/n
theta = np.arccos((1+4*gg+gg**2)/(2*(1+gg+gg**2)))
theta_deg = theta*180./np.pi
print 'theta = ',theta_deg
print('New vectors:')
b1 = Mx[0,:]
b2 = Mx[1,:]

V1 = n*b1 + m*b2
V2 = -1.*m*b1 + (n+m)*b2
print 'V1:'
print V1
print 'V2:'
print V2

A = np.linalg.norm(V1)
B = np.linalg.norm(V2)
C = np.linalg.norm(Mx[2,:])
Alpha = np.arccos(np.dot(V2,Mx[2,:])/(B*C))/np.pi*180.
Beta = np.arccos(np.dot(V1,Mx[2,:])/(A*C))/np.pi*180.
Gamma = np.arccos(np.dot(V2,V1)/(A*B))/np.pi*180.
Alpha_r = np.arccos(np.dot(V2,Mx[2,:])/(B*C))
Beta_r = np.arccos(np.dot(V1,Mx[2,:])/(A*C))
Gamma_r = np.arccos(np.dot(V2,V1)/(A*B))
M2x=np.zeros((3,3),dtype=np.float64)
M2x[0,0]+=A
M2x[1,0]+=B*np.cos(Gamma_r)
M2x[1,1]+=B*np.sin(Gamma_r)
M2x[2,0]+=C*np.cos(Beta_r)
M2x[2,1]+=C*np.sin(Gamma_r)*np.cos(Alpha_r)
M2x[2,2]+=C*np.sin(Alpha_r)

line='{:20.9f}{:20.9f}{:20.9f}\n'.format(0.0,0.0,0.0)
with open('genvecs','w') as arf:
	for i in range(3):
		for j in range(3):
			line+='{:20.9f}'.format(M2x[i,j])
		line+='\n'
		arf.write(line)
		line=''
		
print 'New PBCs:'
print A,B,C,Alpha,Beta,Gamma
newpbc='{:3s}{:>10.5f}{:>10.5f}{:>10.5f}{:>10.5f}{:>10.5f}{:>10.5f} {:<s}'.format('PBC',A,B,C,Alpha,Beta,Gamma,'(P1)\n')
print 'Center first layer'
os.system('geo2bary end.gen;mv saved.gen layer1.gen')
arf=os.popen('./searchmin layer1.gen').readlines()
cmd=' '.join([str(-float(x)) for x in arf[-1].strip().split()])
os.system('geotrans layer1.gen {} tmp_end.gen;mv tmp_end.gen layer1.gen'.format(cmd))
os.system('geotrans layer1.gen 0.0 0.0 1.0 tmp_end.gen;mv tmp_end.gen layer1.gen')
print 'Generation of second layer'
os.system('geotrans layer1.gen 0.0 0.0 3.3 layer2.gen')
print 'Rotation of second layer'
os.system('georot layer2.gen z {:.12f};mv saved.gen layer2.gen'.format(theta_deg))#
print 'alignment with new cell parameters'
os.system('geomove layer1.gen x {:s};mv saved.gen layer1.gen'.format(' '.join([str(x) for x in V1])))
os.system('geomove layer2.gen x {:s};mv saved.gen layer2.gen'.format(' '.join([str(x) for x in V1])))
print 'Writing final file'
os.system('./gen2car layer1.gen 0;./gen2car layer2.gen 1800;cat layer1.car layer2.car >> final.car')
print 'Post treating final file'
with open('final.car','r') as inp:
	content=inp.readlines()
b=1
n=1
c=1
bend=' XXXX 1      xx      B   0.000'
nend=' XXXX 1      xx      N   0.000'
cend=' XXXX 1      xx      C   0.000'
with open('moire.car','w') as out:
	fin=open('final.car','w')
	for i in content:
		if 'PBC ' in i:
			out.write(newpbc)
		elif 'end' in i:
			continue
		elif len(i.strip()) == 0:
			continue
		elif 'XXXX' in i:
			p=[float(x) for x in i.split()[1:3]]
			if isPtInCell(p,[2.398519999,6.399598585],[6.600395061,1.235437831]):
				if i.split()[7]=='C':
					c+=1
					tmp=c
					end=cend
				elif i.split()[7]=='N':
					n+=1
					tmp=n
					end=nend
				elif i.split()[7]=='B':
					b+=1
					tmp=b
					end=bend
				out.write('{:s}{:<4s}{:>15s}{:>15s}{:>15s}{:s}\n'.format(i.split()[7],str(tmp),i.split()[1],i.split()[2],i.split()[3],end))
		else:
			out.write(i)
		fin.write(i)
	out.write('end\nend\n')
	fin.write('end\nend\n')
fin.close()
os.system('unix2dos moire.car final.car')








